plugins {
    id "cpp-library"
    id "cpp-unit-test"
}

repositories {
    maven {
        url "https://repo.gradle.org/gradle/libs-snapshots-local/"
    }
}

unitTest {
    binaries.whenElementFinalized {
        def metadataFormat = org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser.FORMAT_VERSION

        dependencies {
            println metadataFormat
            implementation "org.gradle.cpp-samples:googletest_${metadataFormat}:latest.integration"
        }
    }
}

tasks.withType(CppCompile) {
    compilerArgs.addAll toolChain.map { toolChain ->
        List<String> compilerSpecificArgs = []
        if (toolChain instanceof Gcc || toolChain instanceof Clang) {
            compilerSpecificArgs << "-std=c++11"
            compilerSpecificArgs << "-Wall"
            compilerSpecificArgs << "-Wextra"
            compilerSpecificArgs << "-Werror"
            compilerSpecificArgs << "-O3"
            compilerSpecificArgs << "-pedantic"
        }
        if (toolChain in VisualCpp) {
            compilerSpecificArgs << "/Wall"
            compilerSpecificArgs << "/Wx"
            compilerSpecificArgs << "/O1"
            compilerSpecificArgs << "/O2"
            compilerSpecificArgs << "/Ox"
        }
        return compilerSpecificArgs
    }
}

tasks.withType(LinkSharedLibrary) {
    linkerArgs.addAll toolChain.map { toolChain ->
        List<String> compilerSpecificArgs = []
        if (toolChain instanceof Gcc || toolChain instanceof Clang) {
            compilerSpecificArgs << "-std=c++11"
            compilerSpecificArgs << "-Wall"
            compilerSpecificArgs << "-Wextra"
            compilerSpecificArgs << "-Werror"
            compilerSpecificArgs << "-O3"
            compilerSpecificArgs << "-pedantic"
        }

        if (toolChain in VisualCpp) {
            compilerSpecificArgs << "/Wall"
            compilerSpecificArgs << "/Wx"
            compilerSpecificArgs << "/O1"
            compilerSpecificArgs << "/O2"
            compilerSpecificArgs << "/Ox"
        }
        return compilerSpecificArgs
    }
}
